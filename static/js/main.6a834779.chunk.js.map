{"version":3,"sources":["DisplayFoods.js","FoodList.js","ErrorMessage.js","Nutrition.js","App.js","reportWebVitals.js","index.js"],"names":["DisplayFoods","name","foodType","weight","calories","carbs","carbsUnit","fat","fatUnit","protein","proteinUnit","remove","className","onClick","FoodList","this","props","foodArray","map","foodItem","index","ingredients","parsed","food","toFixed","text","totalNutrients","CHOCDF","quantity","unit","FAT","PROCNT","Id","Component","ErrorMessage","scroll","scrollToTop","Nutrition","toggleHide","el","document","querySelector","state","length","ingredientError","classList","submitFunction","e","preventDefault","getData","setState","userInput","scrollToBottom","handleOnChange","target","value","handleRemoveItem","indexOfClickedFood","updatedFoodList","filter","add","axios","method","url","responseType","params","app_id","app_key","ingr","then","res","console","log","data","copyFoodArray","push","catch","err","action","htmlFor","type","id","onChange","placeholder","autoComplete","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6a834779.chunk.js","sourcesContent":["import { Fragment } from \"react\";\r\n\r\n    const DisplayFoods = ({ name, foodType, weight, calories, carbs, carbsUnit, fat, fatUnit, protein, proteinUnit, remove }) => {\r\n        return(\r\n            <Fragment>\r\n                            <li className='foodItem'>\r\n                                <h3>{name}</h3>\r\n                                <ul className='nutrients'>\r\n                                    <li>\r\n                                        <span>Food Type:</span> \r\n                                        <span>{foodType}</span>\r\n                                    </li>\r\n                                    <li>\r\n                                        <span>Weight:</span>\r\n                                        <span>{weight} g</span>\r\n                                    </li>\r\n                                    <li>\r\n                                        <span>Calories:</span>\r\n                                        <span>{calories} kcal</span>\r\n                                    \r\n                                    </li>\r\n                                    <li>\r\n                                        <span>Carbohydrates:</span> \r\n                                        <span>{carbs} {carbsUnit}</span>\r\n                                    </li>\r\n                                    <li>\r\n                                        <span>Fat:</span> \r\n                                        <span>{fat} {fatUnit}</span>\r\n                                    </li>\r\n                                    <li>\r\n                                        <span>Protein:</span> \r\n                                        <span>{protein} {proteinUnit}</span>\r\n                                    </li>\r\n                                </ul>\r\n                                    <button onClick={remove}>remove</button>\r\n                            </li>\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\nexport default DisplayFoods;","import { Component, Fragment } from 'react';\r\nimport DisplayFoods from './DisplayFoods.js'\r\n\r\n\r\nclass FoodList extends Component {\r\n    render(){\r\n        const {foodArray, remove} = this.props\r\n        return(\r\n            <Fragment>\r\n                    {\r\n                        foodArray.map((foodItem, index) => {\r\n                            return (\r\n                                    <DisplayFoods \r\n                                    key={foodItem.ingredients[0].text + foodItem.ingredients[0].parsed[0].Id}\r\n                                    remove={ () => { remove(index)} }\r\n                                    foodType={foodItem.ingredients[0].parsed[0].food}\r\n                                    weight={foodItem.ingredients[0].parsed[0].weight.toFixed(2)}\r\n                                    name={foodItem.ingredients[0].text}\r\n                                    calories={foodItem.calories}\r\n                                    carbs={foodItem.totalNutrients.CHOCDF.quantity.toFixed(2)}\r\n                                    carbsUnit={foodItem.totalNutrients.CHOCDF.unit}\r\n                                    fat={foodItem.totalNutrients.FAT.quantity.toFixed(2)}\r\n                                    fatUnit={foodItem.totalNutrients.FAT.unit}\r\n                                    protein={(foodItem.totalNutrients.PROCNT.quantity).toFixed(2)}\r\n                                    proteinUnit={foodItem.totalNutrients.PROCNT.unit}\r\n                                    />  \r\n                                    )\r\n                            })\r\n                    }\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FoodList;","import { Component } from 'react';\r\nimport { animateScroll as scroll } from 'react-scroll';\r\n\r\nclass ErrorMessage extends Component {\r\n    render() {\r\n        return (\r\n            <div className='errorAlert'>   \r\n                <h2>Sorry, we weren't able to find what you ate!</h2>\r\n                <div>\r\n                    <p>Please try again, this time add a quantitiy or weight and the food item</p>\r\n                    <p>e.g \"1 chicken breast\" or \"1 scoop of ice cream\"</p>\r\n                </div>\r\n                <button onClick={() => scroll.scrollToTop()} className='errorButton'>Okay!</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ErrorMessage;\r\n\r\n","import { Component, Fragment } from 'react'\r\nimport axios from 'axios'\r\nimport FoodList from './FoodList.js'\r\nimport ErrorMessage from './ErrorMessage.js'\r\nimport { animateScroll as scroll } from 'react-scroll';\r\n\r\nclass Nutrition extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            userInput: '',\r\n            ingredientError: false,\r\n            food:[]\r\n\r\n        }\r\n    }\r\n\r\n    // create a function that toggles off the hide class when the this.state.food > 0 || this.state.ingredientError === true\r\n\r\n    toggleHide = () => {\r\n        const el = document.querySelector('.results');\r\n        if( this.state.food.length > 0 || this.state.ingredientError === true) {\r\n            el.classList.remove('hide');\r\n        }\r\n    }\r\n\r\n    // create a function that prevents default of button click\r\n    // Use this function to call the api function\r\n    submitFunction = (e) => {\r\n        e.preventDefault();\r\n        this.getData();\r\n        this.setState({\r\n            userInput: ''\r\n        })\r\n        scroll.scrollToBottom()\r\n\r\n    }\r\n\r\n    // this function updates the userInput state, so that the axio call will have content to enter in it's query parameter\r\n    handleOnChange = (e) => {\r\n        this.setState({\r\n            userInput: e.target.value\r\n        })\r\n    }\r\n\r\n\r\n    handleRemoveItem = (indexOfClickedFood) => {\r\n        // create a copy of the food state array to manipulate\r\n        const filteredFoodArray = [...this.state.food];\r\n        // filter through each copied array and store it in a variable\r\n        const updatedFoodList = filteredFoodArray.filter((food, index) => {\r\n            return indexOfClickedFood !== index\r\n        })\r\n        this.setState({\r\n            food: updatedFoodList\r\n        })\r\n        // create a condition when the last item is removed from the food list, to add class hide to the results section\r\n        if (this.state.food.length === 1) {\r\n            const el = document.querySelector('.results');\r\n            el.classList.add('hide');\r\n        }\r\n    }\r\n\r\n    // create a function that holds the axios call\r\n    getData = () => {\r\n        // create variables for the API's key, id and url\r\n        const keyAPI = '5698e12ca2f5fbae51fac73d0355787e'\r\n        const idAPI = 'eb92a73a'\r\n        const urlAPI = `https://api.edamam.com/api/nutrition-data?`\r\n        axios({\r\n            method: 'GET',\r\n            url: urlAPI,\r\n            responseType: 'json',\r\n            params: {\r\n                app_id: idAPI,\r\n                app_key: keyAPI,\r\n                ingr: this.state.userInput\r\n            }\r\n        }).then((res) => {\r\n            console.log(res.data);\r\n            // create a conditional statement that ensures the res.data has the objects to render the nutritional values in foodList\r\n            if( res.data.ingredients.length && res.data.ingredients[0].parsed && res.data.ingredients[0].parsed.length && res.data.ingredients[0].parsed[0].weight > 1 ) {\r\n                // creat a independent copy of the food state array to push res.data\r\n                const copyFoodArray = [...this.state.food];\r\n                copyFoodArray.push(res.data);\r\n                // update the food state with the pushed data from the copied array\r\n                // set the userInput to '' to clear the input terminal for the next userInput\r\n                // ensure ingredientError is falst, so the foodList will render, and not the error message\r\n                this.setState({\r\n                    food: copyFoodArray,\r\n                    userInput: '',\r\n                    ingredientError: false\r\n                }) \r\n                // create a else statement that changes the ingredientError state to true\r\n            } else {\r\n                this.setState({\r\n                    ingredientError: true\r\n                })\r\n            }\r\n            this.toggleHide();\r\n        }).catch(err => {\r\n            this.setState({\r\n                ingredientError:true\r\n            })\r\n            this.toggleHide();\r\n        }) \r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return(\r\n            <Fragment>\r\n                <section className='formSection'>\r\n                        <h1>Nutrition Calculator</h1>\r\n                        <form action=\"\">\r\n                            <label htmlFor=\"food\">What are you eating?</label>\r\n                            <input \r\n                                type=\"text\"\r\n                                id=\"food\"\r\n                                onChange={this.handleOnChange}\r\n                                placeholder=\"1 Large Apple\"\r\n                                autoComplete=\"off\"\r\n                                value={this.state.userInput}\r\n                                />\r\n                            <button onClick={this.submitFunction}>Submit</button>   \r\n                        </form>\r\n                </section>\r\n                    <section className='results hide'>\r\n                        <div className='wrapper'>\r\n                            <h2>results</h2>\r\n                            <ul className=\"foodList\">\r\n                        {\r\n                            this.state.ingredientError \r\n                            ? <ErrorMessage />\r\n                            : <FoodList foodArray={this.state.food} remove={this.handleRemoveItem}/>\r\n                        }\r\n                            </ul>\r\n                        </div>\r\n                    </section>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Nutrition;","import { Component, Fragment } from 'react'\r\n// import Search from './Search.js'\r\nimport Nutrition from './Nutrition.js'\r\nimport './setup.css'\r\nimport './App.css'\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n          <Nutrition />\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}