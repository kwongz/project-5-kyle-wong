{"version":3,"sources":["DisplayFoods.js","Nutrition.js","App.js","reportWebVitals.js","index.js"],"names":["DisplayFoods","name","calories","carbs","carbsUnit","fat","fatUnit","protein","proteinUnit","className","Nutrition","submitFunction","e","preventDefault","getData","console","log","state","food","handleOnChange","setState","userInput","target","value","axios","method","url","responseType","params","app_id","app_key","ingr","then","res","copyFoodArray","push","data","empty","action","htmlFor","type","id","onChange","this","required","placeholder","autoComplete","onClick","map","foodItem","index","ingredients","parsed","totalNutrients","CHOCDF","quantity","toFixed","unit","FAT","PROCNT","foodId","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+QAceA,EAdM,SAAC,GAA8E,IAA5EC,EAA2E,EAA3EA,KAAMC,EAAqE,EAArEA,SAAUC,EAA2D,EAA3DA,MAAOC,EAAoD,EAApDA,UAAWC,EAAyC,EAAzCA,IAAKC,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,YAC7E,OACI,qBAAIC,UAAU,WAAd,UACI,6BAAKR,IACL,qBAAIQ,UAAU,YAAd,UACI,4CAAeP,KACf,iDAAoBC,EAApB,IAA4BC,KAC5B,uCAAUC,EAAV,IAAgBC,KAChB,2CAAcC,EAAd,IAAwBC,YC4FzBE,E,kDA9FX,aAAe,IAAD,8BACV,gBAUAC,eAAiB,SAACC,GACdA,EAAEC,iBACF,EAAKC,UACLC,QAAQC,IAAI,EAAKC,MAAMC,OAdjB,EAkBVC,eAAiB,SAACP,GACd,EAAKQ,SAAS,CACVC,UAAWT,EAAEU,OAAOC,SApBlB,EAwBVT,QAAU,WAINU,IAAM,CACFC,OAAO,MACPC,IAHQ,6CAIRC,aAAc,OACdC,OAAQ,CACJC,OAPM,WAQNC,QATO,mCAUPC,KAAM,EAAKd,MAAMI,aAEtBW,MAAK,SAACC,GACD,IAAMC,EAAa,YAAO,EAAKjB,MAAMC,MACrCgB,EAAcC,KAAKF,EAAIG,MACvB,EAAKhB,SAAS,CACVF,KAAMgB,EACNb,UAAW,SAvC3B,EAAKJ,MAAQ,CACTI,UAAW,GACXgB,MAAM,GACNnB,KAAK,IANC,E,qDAkDV,OACI,eAAC,WAAD,WACI,yBAAST,UAAU,OAAnB,SACI,uBAAM6B,OAAO,GAAb,UACI,uBAAOC,QAAQ,OAAf,0BACA,uBACIC,KAAK,OACLC,GAAG,OACHC,SAAUC,KAAKxB,eACfyB,UAAQ,EACRC,YAAY,aACZC,aAAa,QAEjB,wBAAQC,QAASJ,KAAKhC,eAAtB,yBAGR,yBAASF,UAAU,UAAnB,SACI,8BACI,oBAAIA,UAAU,WAAd,SAEIkC,KAAK1B,MAAMC,KAAK8B,KAAI,SAACC,EAAUC,GAC3B,OACI,cAAC,EAAD,CAEAjD,KAAMgD,EAASE,YAAY,GAAGC,OAAO,GAAGlC,KACxChB,SAAU+C,EAAS/C,SACnBC,MAAQ8C,EAASI,eAAeC,OAAOC,SAAUC,QAAQ,GACzDpD,UAAW6C,EAASI,eAAeC,OAAOG,KAC1CpD,IAAM4C,EAASI,eAAeK,IAAIH,SAAUC,QAAQ,GACpDlD,QAAS2C,EAASI,eAAeK,IAAID,KACrClD,QAAU0C,EAASI,eAAeM,OAAOJ,SAAUC,QAAQ,GAC3DhD,YAAayC,EAASI,eAAeM,OAAOF,MARvCR,EAASE,YAAY,GAAGC,OAAO,GAAGQ,wB,GA3EnDC,aCgBTC,G,6KAXX,OACE,eAAC,WAAD,WACE,iCACE,wDAEF,cAAC,EAAD,W,GARUD,cCMHE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjC,MAAK,YAAkD,IAA/CkC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.abce52ae.chunk.js","sourcesContent":["const DisplayFoods = ({ name, calories, carbs, carbsUnit, fat, fatUnit, protein, proteinUnit }) => {\r\n    return(\r\n        <li className='foodItem'>\r\n            <h2>{name}</h2>\r\n            <ul className='nutrients'>\r\n                <li>Calories: {calories}</li>\r\n                <li>Carbohydrates: {carbs} {carbsUnit}</li>\r\n                <li>Fat: {fat} {fatUnit}</li>\r\n                <li>Protein: {protein} {proteinUnit}</li>\r\n            </ul>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default DisplayFoods;","import { Component, Fragment } from 'react'\r\nimport axios from 'axios'\r\nimport DisplayFoods from './DisplayFoods.js'\r\n\r\nclass Nutrition extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            userInput: '',\r\n            empty:'',\r\n            food:[]\r\n        }\r\n    }\r\n        // create a function that prevents default of button click\r\n        // Use this function to call the api function\r\n        submitFunction = (e) => {\r\n            e.preventDefault();\r\n            this.getData();\r\n            console.log(this.state.food);\r\n        }\r\n\r\n        // this function updates the userInput state, so that the axio call will have content to enter in it's query parameter\r\n        handleOnChange = (e) => {\r\n            this.setState({\r\n                userInput: e.target.value\r\n            })\r\n        }\r\n\r\n        getData = () => {\r\n            const keyAPI = '5698e12ca2f5fbae51fac73d0355787e'\r\n            const idAPI = 'eb92a73a'\r\n            const urlAPI = `https://api.edamam.com/api/nutrition-data?`\r\n            axios({\r\n                method:'GET',\r\n                url: urlAPI,\r\n                responseType: 'json',\r\n                params: {\r\n                    app_id: idAPI,\r\n                    app_key: keyAPI,\r\n                    ingr: this.state.userInput\r\n                }\r\n            }).then((res) => {\r\n                    const copyFoodArray = [...this.state.food];\r\n                    copyFoodArray.push(res.data);\r\n                    this.setState({\r\n                        food: copyFoodArray,\r\n                        userInput: ''\r\n                    })\r\n            })\r\n        }\r\n\r\n\r\n\r\n    render() {\r\n        return(\r\n            <Fragment>\r\n                <section className='form'>\r\n                    <form action=\"\">\r\n                        <label htmlFor=\"food\">Enter a food</label>\r\n                        <input \r\n                            type=\"text\"\r\n                            id=\"food\"\r\n                            onChange={this.handleOnChange}\r\n                            required\r\n                            placeholder=\"Enter Food\"\r\n                            autoComplete=\"off\"\r\n                            />\r\n                        <button onClick={this.submitFunction}>Submit</button>\r\n                    </form>\r\n                </section>\r\n                <section className='results'>\r\n                    <div>\r\n                        <ul className='foodList'>\r\n                        {\r\n                            this.state.food.map((foodItem, index) => {\r\n                                return (\r\n                                    <DisplayFoods \r\n                                    key={foodItem.ingredients[0].parsed[0].foodId}\r\n                                    name={foodItem.ingredients[0].parsed[0].food}\r\n                                    calories={foodItem.calories}\r\n                                    carbs={(foodItem.totalNutrients.CHOCDF.quantity).toFixed(2)}\r\n                                    carbsUnit={foodItem.totalNutrients.CHOCDF.unit}\r\n                                    fat={(foodItem.totalNutrients.FAT.quantity).toFixed(2)}\r\n                                    fatUnit={foodItem.totalNutrients.FAT.unit}\r\n                                    protein={(foodItem.totalNutrients.PROCNT.quantity).toFixed(2)}\r\n                                    proteinUnit={foodItem.totalNutrients.PROCNT.unit}\r\n                                    />\r\n                                    )\r\n                                })\r\n                            }\r\n                        </ul>\r\n                    </div>\r\n                </section>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Nutrition;","import { Component, Fragment } from 'react'\n// import Search from './Search.js'\nimport Nutrition from './Nutrition.js'\nimport './App.css'\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Fragment>\n        <header>\n          <h1>Nutrition Calculator</h1>\n        </header>\n        <Nutrition />\n      </Fragment>\n    )\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}